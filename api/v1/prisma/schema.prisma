generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./db/dev.sqlite"
}

model User {
  uuid         String        @id @unique @default(uuid())
  firstName    String
  lastName     String
  birthDate    DateTime
  role         Role          @relation(fields: [roleUuid], references: [uuid])
  roleUuid     String
  group        Group         @relation(fields: [groupUuid], references: [uuid])
  groupUuid    String
  barcode      String?       @unique
  orders       Order[]
  imagePath    String?
  balance      Int           @default(0)
  transactions Transaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  login        UserLogin?
}

model Group {
  uuid      String   @id @unique @default(uuid())
  name      String   @unique
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  uuid      String   @id @unique @default(uuid())
  name      String   @unique
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  uuid       String      @id @unique() @default(uuid())
  name       String      @unique()
  price      Int
  barcode    String?     @unique()
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  cartItem   CartItem?
  orderItems OrderItem[]
}

model Order {
  uuid            String      @id @unique() @default(uuid())
  user            User        @relation(fields: [userUuid], references: [uuid])
  userUuid        String
  amount          Int?
  items           OrderItem[]
  transaction     Transaction @relation(fields: [transactionUuid], references: [uuid])
  transactionUuid String      @unique
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model OrderItem {
  uuid        String   @id @unique() @default(uuid())
  order       Order    @relation(fields: [orderUuid], references: [uuid])
  orderUuid   String
  product     Product  @relation(fields: [productUuid], references: [uuid])
  productUuid String
  count       Int      @default(1)
  amount      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CartItem {
  uuid        String   @id @unique() @default(uuid())
  product     Product  @relation(fields: [productUuid], references: [uuid])
  productUuid String   @unique()
  count       Int      @default(1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Transaction {
  uuid      String   @id @unique() @default(uuid())
  user      User?    @relation(fields: [userUuid], references: [uuid])
  userUuid  String?
  order     Order?
  amount    Int
  createdAt DateTime @default(now())
}

model UserLogin {
  userUuid  String   @id @unique()
  user      User     @relation(fields: [userUuid], references: [uuid])
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
